name: Dynamic ECS Deploy for Active Regions

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  deploy-ecs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up SSH for Terraform repo clone
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.TERRAFORM_REPO_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Clone external Terraform repo
        run: git clone "${{ secrets.TERRAFORM_REPO_URL }}" terraform-repo

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.11.4
          terraform_wrapper: false

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get AWS Regions
        id: get-regions
        run: |
          regions=$(aws ec2 describe-regions --query "Regions[].RegionName" --output text)
          echo "Found AWS regions: $regions"
          echo "REGIONS=$regions" >> $GITHUB_ENV

      - name: Map regions to corresponding modules and deploy
        working-directory: terraform-repo/stage
        run: |
          # Define module map for regions
          declare -A region_modules
          region_modules["us-east-1"]="ecs_deploy_prod"
          region_modules["us-west-2"]="ecs_deploy_prod_oregon"
          region_modules["us-east-2"]="ecs_deploy_prod_ohio"
          
          # Iterate through regions
          for region in $REGIONS; do
            echo "Checking active load balancers in region: $region"
            
            # Get load balancers in the region
            load_balancers=$(aws elbv2 describe-load-balancers --region $region --output json)

            if [ $? -ne 0 ]; then
              echo "AWS CLI command failed in region $region"
              exit 1
            fi

            # Check if there are active load balancers with the 'Environment: stage' tag
            active_lb_found=false

            for arn in $(echo "$load_balancers" | jq -r '.LoadBalancers[] | select(.State.Code == "active") | .LoadBalancerArn'); do
              tags=$(aws elbv2 describe-tags --resource-arn "$arn" --region $region --output json)

              # Check if the load balancer has the 'Environment: stage' tag
              if echo "$tags" | jq -e '.TagDescriptions[].Tags[] | select(.Key == "Environment" and .Value == "stage")' > /dev/null; then
                echo "Found active Load Balancer with 'Environment: stage' tag: $arn in region $region"
                active_lb_found=true
                break
              fi
            done

            # If no active LB with 'Environment: stage' tag is found, skip the region
            if [ "$active_lb_found" = false ]; then
              echo "No active Load Balancer with 'Environment: stage' tag in region $region, skipping."
              continue
            fi

            # Check if the region has a corresponding module
            if [ -z "${region_modules[$region]}" ]; then
              echo "No module found for region $region, skipping."
              continue
            fi

            # Set the module to deploy
            module_to_deploy="${region_modules[$region]}"
            echo "Module to deploy: $module_to_deploy"

            # Initialize terraform for the specific region
            #terraform init -backend-config="region=$region"
            terraform init

            terraform workspace select default

            # Apply Terraform only for the specific region/module
            terraform apply -target=module.$module_to_deploy -var="source_branch=stage" -var="image_tag=$SHORT_SHA" -var="deploy_id=$SHORT_SHA" -auto-approve
          done

#      - name: Get Terraform outputs
#        id: tf-outputs
#        working-directory: terraform-repo/dev
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        run: |
#          WORKSPACE=$(echo "${GITHUB_REF_NAME}" | sed 's|[/_]|-|g')
#          API_ENDPOINT=$(terraform output -raw backend_api_endpoint)
#          echo "api_endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT

#          terraform workspace select default

#          CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)
#          echo "cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT

